import SwiftUI

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
struct StatisticsPromotionView: View {
    @Binding var isPresented: Bool
    @State private var isAnimating = false
    
    var body: some View {
        ZStack {
            // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–π —Ñ–æ–Ω
            Color.black.opacity(0.75)
                .edgesIgnoringSafeArea(.all)
            
            // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            VStack(spacing: 25) {
                // –Ü–∫–æ–Ω–∫–∞ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
                ZStack {
                    Circle()
                        .fill(
                            LinearGradient(
                                colors: [Color.blue, Color.purple],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .frame(width: 100, height: 100)
                        .opacity(isAnimating ? 0.8 : 0.4)
                        .scaleEffect(isAnimating ? 1.2 : 0.8)
                    
                    Image(systemName: "chart.bar.fill")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 50, height: 50)
                        .foregroundColor(.white)
                        .scaleEffect(isAnimating ? 1.1 : 1.0)
                }
                
                Text("–ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è!")
                    .font(.custom("Inter", size: 28).weight(.bold))
                    .foregroundColor(.white)
                
                VStack(spacing: 15) {
                    Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤")
                        .font(.custom("Inter", size: 24).weight(.semibold))
                        .foregroundColor(.white)
                    
                    Text("–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫–æ–∂–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É! –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å, —Å–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Ä–æ–±—ñ—Ç.")
                        .font(.custom("Inter", size: 16))
                        .multilineTextAlignment(.center)
                        .foregroundColor(.white.opacity(0.9))
                        .padding(.horizontal)
                }
                
                Text("–£–≤—ñ–º–∫–Ω—ñ—Ç—å —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –¥–æ–¥–∞—Ç–∫—É")
                    .font(.custom("Inter", size: 14))
                    .foregroundColor(.white.opacity(0.7))
                
                Button(action: {
                    withAnimation(.spring()) {
                        isPresented = false
                    }
                }) {
                    Text("–ó—Ä–æ–∑—É–º—ñ–ª–æ")
                        .font(.custom("Inter", size: 16).weight(.semibold))
                        .foregroundColor(.white)
                        .frame(width: 200, height: 50)
                        .background(
                            LinearGradient(
                                colors: [Color.blue, Color.purple],
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .cornerRadius(25)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 25)
                    .fill(Color(red: 0.1, green: 0.1, blue: 0.2))
                    .shadow(color: .blue.opacity(0.3), radius: 20)
            )
            .padding(.horizontal, 20)
        }
        .onAppear {
            withAnimation(.easeInOut(duration: 2).repeatForever(autoreverses: true)) {
                isAnimating = true
            }
        }
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã Telegram –∫–∞–Ω–∞–ª–∞
struct TelegramPromotionView: View {
    @Binding var isPresented: Bool
    @State private var isAnimating = false
    
    var body: some View {
        ZStack {
            // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–π —Ñ–æ–Ω
            Color.black.opacity(0.75)
                .edgesIgnoringSafeArea(.all)
            
            // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            VStack(spacing: 25) {
                // –ê–Ω—ñ–º–æ–≤–∞–Ω–∞ —ñ–∫–æ–Ω–∫–∞ Telegram
                ZStack {
                    Circle()
                        .fill(
                            LinearGradient(
                                colors: [Color.blue, Color(hex: "#34AADF")],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .frame(width: 100, height: 100)
                        .opacity(isAnimating ? 0.8 : 0.4)
                        .scaleEffect(isAnimating ? 1.2 : 0.8)
                    
                    Image(systemName: "paperplane.fill")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 40, height: 40)
                        .foregroundColor(.white)
                        .rotationEffect(.degrees(isAnimating ? 10 : -10))
                }
                
                VStack(spacing: 15) {
                    Text("–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å!")
                        .font(.custom("Inter", size: 24).weight(.bold))
                        .foregroundColor(.white)
                    
                    Text("–•–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º–∏?")
                        .font(.custom("Inter", size: 18).weight(.semibold))
                        .foregroundColor(.white.opacity(0.9))
                        .multilineTextAlignment(.center)
                    
                    Text("–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª, –¥–µ –º–∏ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–∫—É —Ü—å–æ–≥–æ —Ç–∞ —ñ–Ω—à–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤.")
                        .font(.custom("Inter", size: 16))
                        .foregroundColor(.white.opacity(0.8))
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                    
                    Text("–ú–∏ —â–µ –Ω–µ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é—î–º–æ –∑ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º –æ—Ñ—ñ—Ü—ñ–π–Ω–æ, –∞–ª–µ –¥—É–∂–µ —Ö–æ—Ç—ñ–ª–∏ –±! –ü–æ–∫–∏ —â–æ –ø—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞—Å —Å–≤–æ—î—é –ø—ñ–¥–ø–∏—Å–∫–æ—é üòä")
                        .font(.custom("Inter", size: 14))
                        .foregroundColor(.white.opacity(0.7))
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                
                HStack(spacing: 15) {
                    Button(action: {
                        if let url = URL(string: "https://t.me/xjdevelop") {
                            UIApplication.shared.open(url)
                        }
                    }) {
                        Text("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
                            .font(.custom("Inter", size: 16).weight(.semibold))
                            .foregroundColor(.white)
                            .frame(width: 140, height: 50)
                            .background(Color.blue)
                            .cornerRadius(25)
                    }
                    
                    Button(action: {
                        withAnimation(.spring()) {
                            isPresented = false
                        }
                    }) {
                        Text("–ü—ñ–∑–Ω—ñ—à–µ")
                            .font(.custom("Inter", size: 16).weight(.semibold))
                            .foregroundColor(.white.opacity(0.7))
                            .frame(width: 140, height: 50)
                            .background(Color.gray.opacity(0.3))
                            .cornerRadius(25)
                    }
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 25)
                    .fill(Color(red: 0.1, green: 0.1, blue: 0.2))
                    .shadow(color: .blue.opacity(0.3), radius: 20)
            )
            .padding(.horizontal, 20)
        }
        .onAppear {
            withAnimation(.easeInOut(duration: 1.5).repeatForever(autoreverses: true)) {
                isAnimating = true
            }
        }
    }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–æ–º —Ä–µ–∫–ª–∞–º—ã
class PromotionalManager: ObservableObject {
    static let shared = PromotionalManager()
    
    @Published var shouldShowStatisticsPromo = false
    @Published var shouldShowTelegramPromo = false
    
    @AppStorage("appOpenCount") private var appOpenCount = 0
    @AppStorage("hasSeenStatisticsPromo") private var hasSeenStatisticsPromo = false
    @AppStorage("lastVersionPromoted") private var lastVersionPromoted = ""
    
    private let currentVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? ""
    
    private init() {}
    
    func checkAndShowPromos() {
        appOpenCount += 1
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        if !hasSeenStatisticsPromo || lastVersionPromoted != currentVersion {
            shouldShowStatisticsPromo = true
            hasSeenStatisticsPromo = true
            lastVersionPromoted = currentVersion
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ Telegram –∫–∞–∂–¥—ã–µ 5 –æ—Ç–∫—Ä—ã—Ç–∏–π
        if appOpenCount % 5 == 0 {
            shouldShowTelegramPromo = true
        }
    }
} 