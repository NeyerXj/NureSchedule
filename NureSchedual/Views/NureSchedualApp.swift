//
//  NureSchedualApp.swift
//  NureSchedual
//
//  Created by Kostya Volkov on 11.01.2025.
//

import SwiftUI
import BackgroundTasks
import UserNotifications

class AppDelegate: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if let notificationPayload = launchOptions?[.remoteNotification] as? [String: AnyObject] {
            handleNotificationPayload(notificationPayload)
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        UNUserNotificationCenter.current().delegate = self
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if let notification = launchOptions?[.userActivityDictionary] as? [String: Any],
           let userInfo = notification["UIApplicationLaunchOptionsUserActivityInfoKey"] as? [String: Any],
           let dateString = userInfo["first_change_date"] as? String,
           let date = ISO8601DateFormatter().date(from: dateString) {
            UserDefaults.standard.set(date.timeIntervalSince1970, forKey: "notification_selected_date")
            UserDefaults.standard.set(true, forKey: "should_navigate_to_date")
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        if #available(iOS 13.0, *) {
            BGTaskScheduler.shared.register(
                forTaskWithIdentifier: "KV-corporation.NureSchedual.schedulecheck",
                using: nil
            ) { task in
                self.handleScheduleCheck(task: task as! BGAppRefreshTask)
            }
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        UNUserNotificationCenter.current().requestAuthorization(
            options: [.alert, .badge, .sound, .provisional, .criticalAlert]
        ) { granted, error in
            if granted {
                print("‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                DispatchQueue.main.async {
                    UIApplication.shared.registerForRemoteNotifications()
                }
            } else {
                print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: \(error?.localizedDescription ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
            }
        }
        
        // –í–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        application.setMinimumBackgroundFetchInterval(UIApplication.backgroundFetchIntervalMinimum)
        
        return true
    }
    
    private func handleNotificationPayload(_ payload: [String: AnyObject]) {
        if let dateString = payload["first_change_date"] as? String,
           let date = ISO8601DateFormatter().date(from: dateString) {
            UserDefaults.standard.set(date.timeIntervalSince1970, forKey: "notification_selected_date")
            UserDefaults.standard.set(true, forKey: "should_navigate_to_date")
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    private func handleScheduleCheck(task: BGAppRefreshTask) {
        print("üîÑ –ù–∞—á–∞–ª–æ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        task.expirationHandler = {
            print("‚ö†Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ")
            task.setTaskCompleted(success: false)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        if let groupId = UserDefaults.standard.object(forKey: "selectedGroupId") as? Int {
            print("üì± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã ID: \(groupId)")
            
            // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ API –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.scheduleNextCheck()
            task.setTaskCompleted(success: true)
        } else {
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            task.setTaskCompleted(success: false)
        }
    }
    
    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    private func scheduleNextCheck() {
        let request = BGAppRefreshTaskRequest(identifier: "KV-corporation.NureSchedual.schedulecheck")
        request.earliestBeginDate = Date(timeIntervalSinceNow: 900) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        
        do {
            try BGTaskScheduler.shared.submit(request)
            print("‚úÖ –°–ª–µ–¥—É—é—â–∞—è —Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: \(error.localizedDescription)")
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–µ–ª–µ–≥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        willPresent notification: UNNotification,
        withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
    ) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        completionHandler([.banner, .sound])
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        didReceive response: UNNotificationResponse,
        withCompletionHandler completionHandler: @escaping () -> Void
    ) {
        print("üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: \(response.notification.request.identifier)")
        if response.actionIdentifier == "VIEW_ACTION" || response.actionIdentifier == UNNotificationDefaultActionIdentifier {
            if let dateString = response.notification.request.content.userInfo["first_change_date"] as? String,
               let date = ISO8601DateFormatter().date(from: dateString) {
                UserDefaults.standard.set(date.timeIntervalSince1970, forKey: "notification_selected_date")
                UserDefaults.standard.set(true, forKey: "should_navigate_to_date")
                NotificationCenter.default.post(name: .openScheduleAtDate, object: nil)
            }
        }
        completionHandler()
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    func application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        print("üîÑ –ù–∞—á–∞–ª–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if let groupId = UserDefaults.standard.object(forKey: "selectedGroupId") as? Int {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            fetchAndUpdateSchedule(for: groupId) { success in
                completionHandler(success ? .newData : .failed)
            }
        } else {
            completionHandler(.noData)
        }
    }
    
    private func fetchAndUpdateSchedule(for groupId: Int, completion: @escaping (Bool) -> Void) {
        guard let url = URL(string: "https://api.mindenit.org/schedule/groups/\(groupId)") else {
            completion(false)
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard let data = data else {
                completion(false)
                return
            }
            
            do {
                let decoder = JSONDecoder()
                decoder.keyDecodingStrategy = .convertFromSnakeCase
                let scheduleItems = try decoder.decode([ScheduleItem].self, from: data)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                CacheManager.save(data: data, filename: "schedule_group_\(groupId).json")
                UserDefaults.standard.set(Date(), forKey: "cache_date_\(groupId)")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                let tasks = processScheduleData(scheduleItems: scheduleItems)
                NotificationManager.shared.cancelAllNotifications()
                tasks.forEach { task in
                    NotificationManager.shared.scheduleLessonNotification(for: task)
                }
                
                completion(true)
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error)")
                completion(false)
            }
        }.resume()
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
extension Notification.Name {
    static let openScheduleAtDate = Notification.Name("openScheduleAtDate")
}

@main
struct NureSchedualApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    @StateObject private var promotionalManager = PromotionalManager.shared
    @AppStorage("hasSeenFeatureTour") private var hasSeenFeatureTour = false
    @State private var showFeatureTour = false
    @State private var showOnboarding = false
    
    init() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        UserDefaults.standard.set(["uk"], forKey: "AppleLanguages")
        UserDefaults.standard.synchronize()
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ª–æ–π
        let gradient = CAGradientLayer()
        gradient.colors = [
            UIColor(red: 0.08, green: 0.06, blue: 0.11, alpha: 1.0).cgColor,
            UIColor(red: 0.08, green: 0.06, blue: 0.12, alpha: 1.0).cgColor
        ]
        gradient.startPoint = CGPoint(x: 0.5, y: 0.0)
        gradient.endPoint = CGPoint(x: 0.5, y: 1.0)
        gradient.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 82)
        
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        if let gradientImage = UIImage.from(gradient: gradient) {
            let appearance = UITabBarAppearance()
            appearance.configureWithOpaqueBackground()
            appearance.backgroundImage = gradientImage
            appearance.backgroundColor = .clear // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backgroundColor –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            
            UITabBar.appearance().standardAppearance = appearance
            if #available(iOS 15.0, *) {
                UITabBar.appearance().scrollEdgeAppearance = appearance
            }
        }
    }
    
    var body: some Scene {
        WindowGroup {
            ZStack {
                // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ NavigationStack
                NavigationStack {
                    ContentView()
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if !hasSeenFeatureTour {
                    FeatureTourView(isShowingTour: $showFeatureTour)
                        .onChange(of: showFeatureTour) { newValue in
                            if !newValue {
                                hasSeenFeatureTour = true
                                showOnboarding = true
                            }
                        }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ—Å–ª–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
                if showOnboarding {
                    OnboardingOverlayView(isShowingOnboarding: $showOnboarding, onComplete: {
                        promotionalManager.checkAndShowPromos()
                    })
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if promotionalManager.shouldShowStatisticsPromo {
                    StatisticsPromotionView(isPresented: $promotionalManager.shouldShowStatisticsPromo)
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ Telegram
                if promotionalManager.shouldShowTelegramPromo {
                    TelegramPromotionView(isPresented: $promotionalManager.shouldShowTelegramPromo)
                }
            }
            .onAppear {
                if hasSeenFeatureTour {
                    promotionalManager.checkAndShowPromos()
                } else {
                    showFeatureTour = true
                }
            }
        }
    }
}

