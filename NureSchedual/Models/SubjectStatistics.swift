import Foundation
import SwiftUI

struct SubjectStatistics: Identifiable {
    let id = UUID()
    let subjectName: String
    let practicalLessons: LessonCount
    let laboratoryWorks: LessonCount
    let exams: LessonCount
    let consultations: LessonCount
    let tests: LessonCount
    
    struct LessonCount {
        let completed: Int
        let total: Int
        let nextDate: Date?
        let allDates: [(start: Date, end: Date)]
        
        var progress: Double {
            guard total > 0 else { return 0 }
            return Double(completed) / Double(total)
        }
    }
    
    static func colorForType(_ type: String) -> Color {
        switch type {
        case "–õ–∫": return .yellow
        case "–õ–±": return .cyan
        case "–ü–∑": return .green
        case "–ï–∫–∑": return .red
        case "–ö–æ–Ω—Å": return .blue
        case "–ó–∞–ª": return .purple
        default: return .gray
        }
    }
    
    static func calculateStatistics(from tasks: [Task], startDate: Date? = nil, endDate: Date? = nil) -> [SubjectStatistics] {
        print("üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        if let start = startDate, let end = endDate {
            print("üìÖ –ü–µ—Ä–∏–æ–¥ —Å–µ–º–µ—Å—Ç—Ä–∞: \(DateFormatter.localizedString(from: start, dateStyle: .medium, timeStyle: .none)) - \(DateFormatter.localizedString(from: end, dateStyle: .medium, timeStyle: .none))")
        }
        print("üìö –í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: \(tasks.count)")
        
        var subjectMap: [String: (practical: [Task], laboratory: [Task], exams: [Task], consultations: [Task], tests: [Task])] = [:]
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ —Ç–∏–ø–∞–º
        for task in tasks {
            if task.title == "Break" { 
                print("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Ç–∏–ø–∞ Break")
                continue 
            }
            
            if !subjectMap.keys.contains(task.fullTitle) {
                print("\nüìñ –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: \(task.fullTitle)")
                subjectMap[task.fullTitle] = ([], [], [], [], [])
            }
            
            switch task.type {
            case "–ü–∑":
                subjectMap[task.fullTitle]?.practical.append(task)
                print("‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –ü–ó: \(DateFormatter.localizedString(from: task.date, dateStyle: .short, timeStyle: .none))")
            case "–õ–±":
                subjectMap[task.fullTitle]?.laboratory.append(task)
                print("‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –õ–ë: \(DateFormatter.localizedString(from: task.date, dateStyle: .short, timeStyle: .none))")
            case "–ï–∫–∑":
                if !subjectMap[task.fullTitle]!.exams.contains(where: { Calendar.current.isDate($0.date, inSameDayAs: task.date) }) {
                    subjectMap[task.fullTitle]?.exams.append(task)
                    print("‚úì –î–æ–±–∞–≤–ª–µ–Ω —ç–∫–∑–∞–º–µ–Ω: \(DateFormatter.localizedString(from: task.date, dateStyle: .short, timeStyle: .none))")
                } else {
                    print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —ç–∫–∑–∞–º–µ–Ω–∞")
                }
            case "–ö–æ–Ω—Å":
                subjectMap[task.fullTitle]?.consultations.append(task)
                print("‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: \(DateFormatter.localizedString(from: task.date, dateStyle: .short, timeStyle: .none))")
            case "–ó–∞–ª":
                if !subjectMap[task.fullTitle]!.tests.contains(where: { Calendar.current.isDate($0.date, inSameDayAs: task.date) }) {
                    subjectMap[task.fullTitle]?.tests.append(task)
                    print("‚úì –î–æ–±–∞–≤–ª–µ–Ω –∑–∞—á–µ—Ç: \(DateFormatter.localizedString(from: task.date, dateStyle: .short, timeStyle: .none))")
                } else {
                    print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –∑–∞—á–µ—Ç–∞")
                }
            default:
                print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: \(task.type)")
                break
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LessonCount —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        func createLessonCount(from tasks: [Task], type: String) -> LessonCount {
            print("\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç–∏–π —Ç–∏–ø–∞ \(type)")
            let sortedTasks = tasks.sorted { $0.date < $1.date }
            let currentDate = Date()
            let completed = tasks.filter { $0.date < currentDate }.count
            print("‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ: \(completed) –∏–∑ \(tasks.count)")
            
            var intervals: [(start: Date, end: Date)] = []
            var currentDayTasks: [Task] = []
            
            for task in sortedTasks {
                if currentDayTasks.isEmpty || Calendar.current.isDate(task.date, inSameDayAs: currentDayTasks[0].date) {
                    currentDayTasks.append(task)
                } else {
                    if let firstTask = currentDayTasks.first, let lastTask = currentDayTasks.last {
                        intervals.append((start: firstTask.date, end: lastTask.date))
                        print("üìÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: \(DateFormatter.localizedString(from: firstTask.date, dateStyle: .short, timeStyle: .short)) - \(DateFormatter.localizedString(from: lastTask.date, dateStyle: .none, timeStyle: .short))")
                    }
                    currentDayTasks = [task]
                }
            }
            
            if let firstTask = currentDayTasks.first, let lastTask = currentDayTasks.last {
                intervals.append((start: firstTask.date, end: lastTask.date))
                print("üìÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: \(DateFormatter.localizedString(from: firstTask.date, dateStyle: .short, timeStyle: .short)) - \(DateFormatter.localizedString(from: lastTask.date, dateStyle: .none, timeStyle: .short))")
            }
            
            if let start = startDate, let end = endDate {
                let originalCount = intervals.count
                intervals = intervals.filter { interval in
                    interval.start >= start && interval.end <= end
                }
                print("üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Å–µ–º–µ—Å—Ç—Ä—É: \(intervals.count) –∏–∑ \(originalCount) –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
            }
            
            if let nextDate = sortedTasks.first(where: { $0.date > currentDate })?.date {
                print("‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ: \(DateFormatter.localizedString(from: nextDate, dateStyle: .short, timeStyle: .short))")
            }
            
            return LessonCount(
                completed: completed,
                total: intervals.count,
                nextDate: sortedTasks.first { $0.date > currentDate }?.date,
                allDates: intervals
            )
        }
        
        let statistics = subjectMap.map { subject, tasks in
            print("\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: \(subject)")
            return SubjectStatistics(
                subjectName: subject,
                practicalLessons: createLessonCount(from: tasks.practical, type: "–ü–∑"),
                laboratoryWorks: createLessonCount(from: tasks.laboratory, type: "–õ–±"),
                exams: createLessonCount(from: tasks.exams, type: "–ï–∫–∑"),
                consultations: createLessonCount(from: tasks.consultations, type: "–ö–æ–Ω—Å"),
                tests: createLessonCount(from: tasks.tests, type: "–ó–∞–ª")
            )
        }.sorted { $0.subjectName < $1.subjectName }
        
        print("\n‚úÖ –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: \(statistics.count)")
        return statistics
    }
} 