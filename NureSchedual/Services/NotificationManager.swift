import Foundation
import SwiftUICore
import UserNotifications

class NotificationManager {
    static let shared = NotificationManager()
    
    // –î–æ–±–∞–≤–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    private var lastScheduleHash: Int = 0
    private var lastUpdateTime: Date = Date()
    private let minimumUpdateInterval: TimeInterval = 300 // 5 –º–∏–Ω—É—Ç
    
    // –î–æ–±–∞–≤–∏–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    private var isLoadingNotifications: Bool = false
    
    // –î–æ–±–∞–≤–∏–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ ID
    private var currentScheduleId: Int?
    private var currentScheduleType: ScheduleType = .group
    
    // –î–æ–±–∞–≤–∏–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    private var lastScheduleHashString: String = ""
    
    private enum ScheduleType {
        case group
        case teacher
    }
    
    private init() {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        requestNotificationPermissions()
    }
    
    private func requestNotificationPermissions() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            if granted {
                print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
            } else {
                print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)")
                }
            }
        }
    }
    
    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—ã
    func scheduleLessonNotification(for task: Task) {
        guard task.title != "Break" else { return }
        
        let calendar = Calendar.current
        let currentDate = Date()
        let startDate = calendar.startOfDay(for: currentDate)
        let endDate = calendar.date(byAdding: .day, value: 7, to: startDate)!
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        guard task.date > currentDate && task.date < endDate else {
//            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –¥–∞—Ç–∞ –≤–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ 7 –¥–Ω–µ–π: \(formatDateTime(task.date))")
            return
        }
        
        let content = UNMutableNotificationContent()
        content.title = "üéì –°–∫–æ—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∏"
        content.body = """
            üìö \(task.title)
            üèõ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: \(task.auditory)
            ‚è∞ –ü–æ—á–∞—Ç–æ–∫: \(formatTime(task.date))
            """
        content.sound = .default
        
        // –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
        let notificationTime = calendar.date(byAdding: .minute, value: -10, to: task.date) ?? task.date
        
        let components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: notificationTime)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        
        let request = UNNotificationRequest(
            identifier: "lesson_\(UUID().uuidString)",
            content: content,
            trigger: trigger
        )
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error.localizedDescription)")
            } else {
                print(currentDate)
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ \(self.formatDateTime(notificationTime))")
            }
        }
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    func scheduleScheduleChangeNotification(changes: [ScheduleChange]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        guard UserDefaults.standard.bool(forKey: "isNotificationsEnabled") &&
              UserDefaults.standard.bool(forKey: "isScheduleChangesNotificationsEnabled") else {
            return
        }
        
        let content = UNMutableNotificationContent()
        content.title = "üìÖ –ó–º—ñ–Ω–∏ —É —Ä–æ–∑–∫–ª–∞–¥—ñ"
        content.categoryIdentifier = "schedule_change"
        content.interruptionLevel = .timeSensitive
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
        let groupedChanges = Dictionary(grouping: changes) { change in
            Calendar.current.startOfDay(for: change.date)
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
        let nearestDate = changes
            .map { $0.date }
            .min { $0.timeIntervalSinceNow < $1.timeIntervalSinceNow }
        
        if let nearestDate = nearestDate {
            let iso8601Formatter = ISO8601DateFormatter()
            content.userInfo = ["first_change_date": iso8601Formatter.string(from: nearestDate)]
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "uk_UA")
        dateFormatter.dateStyle = .medium
        
        var body = "–ó–º—ñ–Ω–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏:\n"
        for date in groupedChanges.keys.sorted() {
            body += "\nüìÜ \(dateFormatter.string(from: date))"
        }
        
        content.body = body
        content.sound = .defaultCritical
        
        // –î–µ–π—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let viewAction = UNNotificationAction(
            identifier: "VIEW_ACTION",
            title: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏",
            options: .foreground
        )
        
        let category = UNNotificationCategory(
            identifier: "schedule_change",
            actions: [viewAction],
            intentIdentifiers: [],
            options: .customDismissAction
        )
        
        UNUserNotificationCenter.current().setNotificationCategories([category])
        
        let request = UNNotificationRequest(
            identifier: UUID().uuidString,
            content: content,
            trigger: nil
        )
        
        UNUserNotificationCenter.current().add(request)
    }
    
    // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func cancelAllNotifications() {
        UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
        UNUserNotificationCenter.current().removeAllDeliveredNotifications()
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    func cancelAllLessonNotifications() {
        // –ò—â–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä (–ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É)
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            let lessonNotifications = requests.filter { $0.identifier.starts(with: "lesson_") }
            UNUserNotificationCenter.current().removePendingNotificationRequests(
                withIdentifiers: lessonNotifications.map { $0.identifier }
            )
        }
    }
    
    private func formatTime(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "uk_UA")
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
    
    private func checkNotificationStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            print("üì± –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            print("- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: \(settings.authorizationStatus.rawValue)")
            print("- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ: \(settings.notificationCenterSetting.rawValue)")
            print("- –ó–≤—É–∫: \(settings.soundSetting.rawValue)")
            print("- –ë–µ–π–¥–∂: \(settings.badgeSetting.rawValue)")
            print("- –í—Ä–µ–º–µ–Ω–Ω—ã–µ: \(settings.providesAppNotificationSettings)")
        }
    }
    
    func scheduleTestNotification() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        UserDefaults.standard.set(true, forKey: "isNotificationsEnabled")
        
        let content = UNMutableNotificationContent()
        content.title = "üîî –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        content.body = "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        content.sound = .default
        content.threadIdentifier = "test"
        content.interruptionLevel = .timeSensitive
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
        
        let request = UNNotificationRequest(
            identifier: "test_notification",
            content: content,
            trigger: trigger
        )
        
        print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            }
        }
    }
    
    // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—Ä–µ
    func scheduleTestLessonNotification() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        UserDefaults.standard.set(true, forKey: "isNotificationsEnabled")
        UserDefaults.standard.set(true, forKey: "isLessonStartNotificationsEnabled")
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        let currentDate = Date()
        let testDate = Calendar.current.date(byAdding: .minute, value: 2, to: currentDate) ?? currentDate
        
        print("‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: \(formatDateTime(currentDate))")
        print("üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã: \(formatDateTime(testDate))")
        
        let testTask = Task(
            title: "–¢–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä–∞",
            fullTitle: "–¢–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä–∞ (–ø–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞)",
            caption: "–¢–µ—Å—Ç",
            date: testDate,
            tint: .blue,
            auditory: "Test-101",
            type: "–õ–µ–∫—Ü—ñ—è",
            teacher: "–¢–µ—Å—Ç–æ–≤–∏–π –≤–∏–∫–ª–∞–¥–∞—á"
        )
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        let content = UNMutableNotificationContent()
        content.title = "üéì –°–∫–æ—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∏"
        content.body = """
            ÔøΩÔøΩ \(testTask.title)
            üèõ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: \(testTask.auditory)
            ‚è∞ –ü–æ—á–∞—Ç–æ–∫: \(formatTime(testTask.date))
            """
        content.sound = .default
        content.threadIdentifier = "lessons"
        content.interruptionLevel = .timeSensitive
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        let notificationTime = Calendar.current.date(byAdding: .second, value: 30, to: currentDate) ?? currentDate
        
        print("üìã –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        print("- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: \(formatDateTime(currentDate))")
        print("- –í—Ä–µ–º—è –ø–∞—Ä—ã: \(formatDateTime(testDate))")
        print("- –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(formatDateTime(notificationTime))")
        
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year, .month, .day, .hour, .minute, .second], from: notificationTime)
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        
        let request = UNNotificationRequest(
            identifier: "test_lesson_\(UUID().uuidString)",
            content: content,
            trigger: trigger
        )
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error.localizedDescription)")
            } else {
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ \(self.formatDateTime(notificationTime))")
            }
        }
    }
    
    // –î–æ–±–∞–≤–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    private func formatDateTime(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "uk_UA")
        formatter.dateFormat = "dd.MM.yyyy HH:mm:ss"
        return formatter.string(from: date)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ shouldUpdateNotifications
    private func shouldUpdateNotifications(for tasks: [Task]) -> Bool {
        let currentHash = tasks.reduce("") { hash, task in
            hash + "\(task.date.timeIntervalSince1970)_\(task.title)_\(task.auditory)"
        }
        
        let scheduleChanged = currentHash != lastScheduleHashString
        
        if scheduleChanged {
            print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            lastScheduleHashString = currentHash
            return true
        }
        
        print("üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return false
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ fetchAndProcessSchedule
    private func fetchAndProcessSchedule(from url: URL) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∞
        guard !isLoadingNotifications else {
            print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        }
        
        isLoadingNotifications = true
        
        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
            guard let self = self else { return }
            defer { 
                self.isLoadingNotifications = false
                print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            }
            
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error.localizedDescription)")
                return
            }
            
            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return
            }
            
            do {
                let decoder = JSONDecoder()
                decoder.keyDecodingStrategy = .convertFromSnakeCase
                
                let scheduleItems = try decoder.decode([ScheduleItem].self, from: data)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
                guard !scheduleItems.isEmpty else {
                    print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                    return
                }
                
                print("üîÑ –í—ã–∑–æ–≤ processScheduleData")
                let tasks = self.processScheduleData(scheduleItems: scheduleItems)
                
                if self.shouldUpdateNotifications(for: tasks) {
                    print("üîÑ –í—ã–∑–æ–≤ updateNotificationsForTasks")
                    self.updateNotificationsForTasks(tasks)
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error.localizedDescription)")
                print("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error)")
            }
        }.resume()
    }
    
    // –í—ã–¥–µ–ª–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    private func updateNotificationsForTasks(_ tasks: [Task]) {
        let calendar = Calendar.current
        let currentDate = Date()
        let startDate = calendar.startOfDay(for: currentDate)
        let endDate = calendar.date(byAdding: .day, value: 7, to: startDate)!
        
        print("\nüìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        print("- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: \(formatDateTime(currentDate))")
        print("- –ü–µ—Ä–∏–æ–¥: \(formatDateTime(startDate)) - \(formatDateTime(endDate))")
        
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cancelAllNotifications()
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let validTasks = tasks.filter { task in
            let taskStartOfDay = calendar.startOfDay(for: task.date)
            let isValid = taskStartOfDay >= startDate && taskStartOfDay < endDate
            
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏:")
            print("- –ü—Ä–µ–¥–º–µ—Ç: \(task.title)")
            print("- –î–∞—Ç–∞: \(formatDateTime(task.date))")
            print("- –í–∞–ª–∏–¥–Ω–∞: \(isValid)")
            
            return isValid
        }
        
        print("\nüìä –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print("- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: \(tasks.count)")
        print("- –ü—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É: \(validTasks.count)")
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á
        for task in validTasks {
            scheduleLessonNotification(for: task)
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func checkScheduledNotifications() {
        UNUserNotificationCenter.current().getPendingNotificationRequests { [self] requests in
            let calendar = Calendar.current
            let currentDate = Date()
            let endDate = calendar.date(byAdding: .day, value: 7, to: currentDate) ?? currentDate
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            let filteredRequests = requests.filter { request in
                guard let trigger = request.trigger as? UNCalendarNotificationTrigger else { return false }
                let components = trigger.dateComponents
                guard let date = calendar.date(from: components) else { return false }
                return date > currentDate && date <= endDate
            }
            
            print("\nüìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:")
            print("- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: \(self.formatDateTime(currentDate))")
            print("- –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: \(self.formatDateTime(endDate))")
            print("- –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: \(filteredRequests.count)")
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            let groupedRequests = Dictionary(grouping: filteredRequests) { request -> Date in
                if let trigger = request.trigger as? UNCalendarNotificationTrigger,
                   let date = calendar.date(from: trigger.dateComponents) {
                    return calendar.startOfDay(for: date)
                }
                return currentDate
            }
            
            // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–µ–¥–µ–ª–∏
            for (date, requests) in groupedRequests.sorted(by: { $0.key < $1.key }) {
                print("\nüìÜ \(self.formatDateTime(date)):")
                for request in requests {
                    if let trigger = request.trigger as? UNCalendarNotificationTrigger {
                        print("üîî \(request.content.title)")
                        print("üìù \(request.content.body)")
                        print("‚è∞ \(self.formatDateTime(calendar.date(from: trigger.dateComponents) ?? date))")
                        print("---")
                    }
                }
            }
        }
    }
    
    private func processScheduleData(scheduleItems: [ScheduleItem]) -> [Task] {
        var tasks: [Task] = []
        let calendar = Calendar.current
        let currentDate = Date()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞ –≤ 7 –¥–Ω–µ–π
        let startDate = calendar.startOfDay(for: currentDate)
        let endDate = calendar.date(byAdding: .day, value: 7, to: startDate)!
        
        print("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
        print("- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: \(formatDateTime(currentDate))")
        print("- –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: \(formatDateTime(startDate))")
        print("- –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: \(formatDateTime(endDate))")
        print("- –í—Å–µ–≥–æ –ø–∞—Ä –∏–∑ API: \(scheduleItems.count)")
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        let filteredItems = scheduleItems.compactMap { item -> (ScheduleItem, Date)? in
            let itemDate = Date(timeIntervalSince1970: TimeInterval(item.startTime))
            let itemStartOfDay = calendar.startOfDay(for: itemDate)
            
            // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤ 7 –¥–Ω–µ–π
            if itemStartOfDay >= startDate && itemStartOfDay < endDate {
                print("\n‚úÖ –ü–∞—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 7 –¥–Ω–µ–π:")
                print("- –ü—Ä–µ–¥–º–µ—Ç: \(item.subject.title)")
                print("- –î–∞—Ç–∞: \(formatDateTime(itemDate))")
                return (item, itemDate)
            } else {
                print("\n‚ùå –ü–∞—Ä–∞ –≤–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ 7 –¥–Ω–µ–π:")
                print("- –ü—Ä–µ–¥–º–µ—Ç: \(item.subject.title)")
                print("- –î–∞—Ç–∞: \(formatDateTime(itemDate))")
                return nil
            }
        }.sorted { $0.1 < $1.1 }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        for (item, date) in filteredItems {
            let task = Task(
                title: item.subject.brief,
                fullTitle: item.subject.title,
                caption: item.type,
                date: date,
                tint: getTintColor(for: item.type),
                auditory: item.auditory,
                type: item.type,
                teacher: item.teachers.first?.fullName ?? "–ù–µ —É–∫–∞–∑–∞–Ω"
            )
            tasks.append(task)
        }
        
        print("\nüìä –ò—Ç–æ–≥–∏:")
        print("- –í—Å–µ–≥–æ –ø–∞—Ä: \(scheduleItems.count)")
        print("- –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ 7 –¥–Ω–µ–π: \(tasks.count)")
        
        return tasks
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∞—Ä—ã
    private func getTintColor(for type: String) -> Color {
        switch type.lowercased() {
        case "–ª–µ–∫—Ü—ñ—è", "–ª–µ–∫—Ü–∏—è":
            return .blue
        case "–ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ":
            return .green
        case "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è":
            return .orange
        case "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            return .purple
        case "–µ–∫–∑–∞–º–µ–Ω", "—ç–∫–∑–∞–º–µ–Ω":
            return .red
        default:
            return .blue
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ updateScheduleNotifications
    func updateScheduleNotifications(force: Bool = false) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        guard !isLoadingNotifications else {
            print("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        }
        
        if force {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            lastScheduleHashString = ""
            currentScheduleId = nil
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        }
        
        let isTeacherMode = UserDefaults.standard.bool(forKey: "isTeacherMode")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏ –º—ã —Ç–æ –∂–µ —Å–∞–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if !force {
            if isTeacherMode {
                if let teacherId = UserDefaults.standard.object(forKey: "savedTeachersId") as? Int,
                   currentScheduleId == teacherId && currentScheduleType == .teacher {
                    print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
                    return
                }
            } else {
                if let groupId = UserDefaults.standard.object(forKey: "selectedGroupId") as? Int,
                   currentScheduleId == groupId && currentScheduleType == .group {
                    print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
                    return
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if isTeacherMode {
            if let teacherId = UserDefaults.standard.object(forKey: "savedTeachersId") as? Int {
                currentScheduleId = teacherId
                currentScheduleType = .teacher
                fetchAndScheduleNotifications(forTeacherId: teacherId)
            }
        } else {
            if let groupId = UserDefaults.standard.object(forKey: "selectedGroupId") as? Int {
                currentScheduleId = groupId
                currentScheduleType = .group
                fetchAndScheduleNotifications(forGroupId: groupId)
            }
        }
    }
    
    private func fetchAndScheduleNotifications(forGroupId groupId: Int) {
        print("üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã ID: \(groupId)")
        
        guard let url = URL(string: "https://api.mindenit.org/schedule/groups/\(groupId)") else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –≥—Ä—É–ø–ø—ã")
            return
        }
        
        fetchAndProcessSchedule(from: url)
    }
    
    private func fetchAndScheduleNotifications(forTeacherId teacherId: Int) {
        print("üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ID: \(teacherId)")
        
        guard let url = URL(string: "https://api.mindenit.org/schedule/teachers/\(teacherId)") else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            return
        }
        
        fetchAndProcessSchedule(from: url)
    }
} 
