import Foundation
import UserNotifications

class NotificationManager {
    static let shared = NotificationManager()
    
    private init() {}
    
    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—ã
    func scheduleLessonNotification(for task: Task) {
        guard UserDefaults.standard.bool(forKey: "isLessonStartNotificationsEnabled"),
              task.type != "Break" else { return }
        
        let content = UNMutableNotificationContent()
        content.title = "üéì –°–∫–æ—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∏"
        content.body = """
            üìö \(task.title)
            üèõ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: \(task.auditory)
            ‚è∞ –ü–æ—á–∞—Ç–æ–∫: \(formatTime(task.date))
            """
        content.sound = .default
        
        // –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
        let notificationTime = task.date.addingTimeInterval(-600) // 10 –º–∏–Ω—É—Ç
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notificationTime > Date() {
            let calendar = Calendar.current
            let components = calendar.dateComponents([.hour, .minute], from: notificationTime)
            
            var trigger: UNNotificationTrigger
            
            if let timeZone = TimeZone.current.secondsFromGMT() as? Double {
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                let adjustedDate = notificationTime.addingTimeInterval(-timeZone)
                trigger = UNCalendarNotificationTrigger(
                    dateMatching: calendar.dateComponents([.hour, .minute], from: adjustedDate),
                    repeats: false
                )
            } else {
                trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
            }
            
            let request = UNNotificationRequest(
                identifier: "lesson_\(task.id)",
                content: content,
                trigger: trigger
            )
            
            UNUserNotificationCenter.current().add(request)
        }
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    func scheduleScheduleChangeNotification(changes: [ScheduleChange]) {
        guard UserDefaults.standard.bool(forKey: "isScheduleChangesNotificationsEnabled") else { return }
        
        let content = UNMutableNotificationContent()
        content.title = "üìÖ –ó–º—ñ–Ω–∏ —É —Ä–æ–∑–∫–ª–∞–¥—ñ"
        content.categoryIdentifier = "schedule_change"
        content.interruptionLevel = .timeSensitive
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
        let groupedChanges = Dictionary(grouping: changes) { change in
            Calendar.current.startOfDay(for: change.date)
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
        let nearestDate = changes
            .map { $0.date }
            .min { $0.timeIntervalSinceNow < $1.timeIntervalSinceNow }
        
        if let nearestDate = nearestDate {
            let iso8601Formatter = ISO8601DateFormatter()
            content.userInfo = ["first_change_date": iso8601Formatter.string(from: nearestDate)]
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "uk_UA")
        dateFormatter.dateStyle = .medium
        
        var body = "–ó–º—ñ–Ω–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏:\n"
        for date in groupedChanges.keys.sorted() {
            body += "\nüìÜ \(dateFormatter.string(from: date))"
        }
        
        content.body = body
        content.sound = .defaultCritical
        
        // –î–µ–π—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let viewAction = UNNotificationAction(
            identifier: "VIEW_ACTION",
            title: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏",
            options: .foreground
        )
        
        let category = UNNotificationCategory(
            identifier: "schedule_change",
            actions: [viewAction],
            intentIdentifiers: [],
            options: .customDismissAction
        )
        
        UNUserNotificationCenter.current().setNotificationCategories([category])
        
        let request = UNNotificationRequest(
            identifier: UUID().uuidString,
            content: content,
            trigger: nil
        )
        
        UNUserNotificationCenter.current().add(request)
    }
    
    // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func cancelAllNotifications() {
        UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
        UNUserNotificationCenter.current().removeAllDeliveredNotifications()
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    func cancelAllLessonNotifications() {
        // –ò—â–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä (–ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É)
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            let lessonNotifications = requests.filter { $0.identifier.starts(with: "lesson_") }
            UNUserNotificationCenter.current().removePendingNotificationRequests(
                withIdentifiers: lessonNotifications.map { $0.identifier }
            )
        }
    }
    
    private func formatTime(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "uk_UA")
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
} 